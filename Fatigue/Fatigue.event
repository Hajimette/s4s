#include "Extensions/Hack Installation.txt"
#include "Tools/Tool Helpers.txt"

#ifdef _FE8_
#ifndef FE8_FATIGUE
#define FE8_FATIGUE


//Take the the cannot be deployed hack and make its conditions be if fatigue > max HP
//Add S Drink, which removes all fatigue when used
//At the end of the prep screen, set fatigue to 0 for everyone marked undeployed

//Filling in text here because custom build doesn't like text processing

ALIGN 4
SS_FatigueRText_String:
String("This unit's level of fatigue."); BYTE 0

ALIGN 4
SS_FatigueText_String:
String("Ftg"); BYTE 0

ALIGN 4
MessageFatigueRestored_String:
String("Fatigue restored"); BYTE 0

setText(SS_FatigueRText, SS_FatigueRText_String)
setText(SS_FatigueText, SS_FatigueText_String)
setText(MessageFatigueRestored, MessageFatigueRestored_String)

//Contains check if unit can be fatigued, routines for incrementing fatigue after action, routine for clearing fatigue on undeployed units
#include "Fatigue.lyn.event"

//Contains fatigue getter for MSS, call before draw_number_at
#include "FatigueMSS.lyn.event"

//Contains denying deployment if fatigued
#include "FatiguePrepScreen.lyn.event"

//Contains fatigue-restoring items
#include "FatigueItems.lyn.event"

//Contains ASMC for setting fatigue
#include "FatigueASMC.lyn.event"

//prep screen hooks
PUSH
ORG 0x957F8 //call of a function nonexistent in vanilla for deny deployment & restore fatigued if not deployed in the previous chapter
//jumpToHack(DenyDeploymentIfFatigued)
POP

ALIGN 4
FatigueExemptCharList:
BYTE Eirika
BYTE 0

ALIGN 4
FatigueStartingChapter:
BYTE 06

ALIGN 4
CharacterStructFatigueByte: //for EMS
BYTE 0x3B

ALIGN 4
FatigueRestoredTextID:
SHORT MessageFatigueRestored

#define ClearFatigue(charID) "SVAL 1 charID; SVAL 2 0; ASMC SetFatigueASMC"
#define SetFatigue(charID,ftgValue) "SVAL 1 charID; SVAL 2 ftgValue; ASMC SetFatigueASMC"


ALIGN 4
#endif // FE8_FATIGUE
#else // _FE8_
ERROR Fatigue is only for FE8!
#endif // _FE8_
